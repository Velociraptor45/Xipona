@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.Recipes.Actions.Editor
@using ProjectHermes.Xipona.Frontend.Redux.Recipes.States

@inject IState<RecipeState> State
@inject IDispatcher Dispatcher


@if (State.Value.Editor.Recipe is not null)
{
    <div class="d-flex editor-top-row-parent">
        <Button Class="editor-top-row-item d-flex align-items-center" OnClick="@OnBackButtonClicked">
            <i class="bi bi-arrow-left"></i>
        </Button>
        <div class="mx-3 editor-top-row-item">
            <Input TValue="string" Value="@State.Value.Editor.Recipe!.Name"
                   Placeholder="Recipe name" OnInput="OnNameChanged"/>
            @if (State.Value.Editor.ValidationResult.Name is not null)
            {
                <div class="validation-error-message">@State.Value.Editor.ValidationResult.Name</div>
            }
        </div>
        <Button Class="editor-top-row-item d-flex ml-auto align-items-center" OnClick="@OnToggleEditModeButtonClicked">
            <i class="bi bi-pencil-fill"></i>
        </Button>
    </div>
    <hr class="my-3"/>
    <div class="editor-main">
        <div class="editor-content">
            <GeneralInfoEditor></GeneralInfoEditor>
            <div class="editor-content-split">
                <div class="ingredients">
                    <IngredientsEditor></IngredientsEditor>
                </div>
                <div class="preparation-steps">
                    <PreparationStepsEditor></PreparationStepsEditor>
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-end mt-2">
            @if (State.Value.Editor.Recipe.Id == Guid.Empty)
            {
                <Button Type="@ButtonType.Primary"
                        Disabled="@(State.Value.Editor.Recipe.Name.Length == 0)"
                        Loading="@State.Value.Editor.IsSaving"
                        @onclick="@OnCreateButtonClickedAsync">
                    Create
                </Button>
            }
            else
            {
                <Button Type="@ButtonType.Primary"
                        Disabled="@(State.Value.Editor.Recipe.Name.Length == 0)"
                        Loading="@State.Value.Editor.IsSaving"
                        @onclick="@OnModifyButtonClickedAsync">
                    Save
                </Button>
            }
        </div>
    </div>
}

@code {
    private void OnNameChanged(ChangeEventArgs args)
    {
        Dispatcher.Dispatch(new RecipeNameChangedAction(args.Value?.ToString() ?? string.Empty));
    }

    private void OnBackButtonClicked()
    {
        Dispatcher.Dispatch(new LeaveRecipeEditorAction(false));
    }

    private void OnToggleEditModeButtonClicked()
    {
        Dispatcher.Dispatch(new ToggleEditModeAction());
    }

    private void OnCreateButtonClickedAsync()
    {
        Dispatcher.Dispatch(new CreateRecipeAction());
    }

    private void OnModifyButtonClickedAsync()
    {
        Dispatcher.Dispatch(new ModifyRecipeAction());
    }

}
