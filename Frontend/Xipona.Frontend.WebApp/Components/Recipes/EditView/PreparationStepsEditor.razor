@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.Recipes.Actions.Editor.PreparationSteps
@using ProjectHermes.Xipona.Frontend.Redux.Recipes.States

@inject IState<RecipeState> State
@inject IDispatcher Dispatcher

<div class="preparation-steps">
    <div class="d-flex align-items-center mb-3">
        <h4 class="mb-0 pr-2">Steps</h4>
        <Button class="d-flex align-items-center"
                Size="@ButtonSize.Small"
                OnClick="OnAddPreparationStepButtonClicked">
            <i class="bi bi-plus-lg"></i>
        </Button>
    </div>
    @foreach (var step in State.Value.Editor.Recipe!.PreparationSteps)
    {
        <SortableListItem T="EditedPreparationStep"
                          State="State.Value.Editor.Recipe"
                          Model="step"
                          Placeholder="Instruction"
                          IsTextArea="true"
                          OnDecrement="OnDecrementPreparationStep"
                          OnIncrement="OnIncrementPreparationStep"
                          OnRemove="OnRemovePreparationStep"
                          OnTextChanged="OnPreparationStepTextChanged"></SortableListItem>
    }
</div>

@code
{
    private void OnAddPreparationStepButtonClicked()
    {
        Dispatcher.Dispatch(new PreparationStepAddedAction());
    }

    private void OnDecrementPreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new DecrementPreparationStepAction(step));
    }

    private void OnIncrementPreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new IncrementPreparationStepAction(step));
    }

    private void OnRemovePreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new PreparationStepRemovedAction(step));
    }

    private void OnPreparationStepTextChanged(EditedPreparationStep step, string text)
    {
        Dispatcher.Dispatch(new PreparationStepTextChangedAction(step.Key, text));
    }
}
