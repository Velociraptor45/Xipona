@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.Shared.States
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.Actions.TemporaryItemCreator
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.States

@inject IState<SharedState> SharedState
@inject IState<ShoppingListState> State
@inject IDispatcher Dispatcher

<div class="temporary-item-creator">
    <Tooltip Placement="Placement.BottomRight" Title="@("Create temp. item")" Disabled="SharedState.Value.IsMobile">
        <Button Type="@ButtonType.Primary"
                OnClick="@OnOpenCreationButtonClicked"
                Class="d-flex align-items-center">
            <i class="bi bi-plus-lg"></i>
        </Button>
    </Tooltip>
    <Modal Title="Add temporary item"
           Visible="@State.Value.TemporaryItemCreator.IsOpen"
           OnCancel="@CloseModal"
           ConfirmLoading="@State.Value.TemporaryItemCreator.IsSaving"
           Footer="@GetFooter()">
        <div>
            <Input TValue="string" Value="State.Value.TemporaryItemCreator.ItemName" 
                   Placeholder="Item name"
                   OnInput="OnNameChanged"></Input>
            <div>
                <div>Section</div>
                <div class="d-flex">
                    <Select TItem="ShoppingListStoreSection"
                            TItemValue="Guid"
                            ValueName="@nameof(ShoppingListStoreSection.Id)"
                            LabelName="@nameof(ShoppingListStoreSection.Name)"
                            DataSource="@State.Value.SelectedStore!.Sections.OrderBy(s => s.SortingIndex)"
                            OnSelectedItemChanged="OnSelectedSectionChanged"
                            AllowClear="false"
                            IgnoreItemChanges="false"
                            Value="@(State.Value.TemporaryItemCreator.Section?.Id ?? Guid.Empty)">
                    </Select>
                    <div class="d-flex pl-4 align-items-center">
                        <div class="price-input mr-1">
                            <Input TValue="float" Value="@State.Value.TemporaryItemCreator.Price"
                                   ValueChanged="OnPriceChanged">
                            </Input>
                        </div>
                        <div>
                            <Select TItem="QuantityType"
                                    TItemValue="int"
                                    ValueName="@nameof(QuantityType.Id)"
                                    LabelName="@nameof(QuantityType.PriceLabel)"
                                    DataSource="@State.Value.QuantityTypes"
                                    OnSelectedItemChanged="OnSelectedQuantityTypeIdChanged"
                                    AllowClear="false"
                                    Value="@State.Value.TemporaryItemCreator.SelectedQuantityTypeId">
                            </Select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Modal>
</div>

@code {
    private void OnNameChanged(ChangeEventArgs args)
    {
        var name = args.Value!.ToString();
        Dispatcher.Dispatch(new TemporaryItemNameChangedAction(name!));
    }

    private void OnPriceChanged(float price)
    {
        Dispatcher.Dispatch(new TemporaryItemPriceChangedAction(price));
    }

    private void OnOpenCreationButtonClicked()
    {
        Dispatcher.Dispatch(new OpenTemporaryItemCreatorAction());
    }

    private void CloseModal()
    {
        Dispatcher.Dispatch(new CloseTemporaryItemCreatorAction());
    }

    private void OnSelectedSectionChanged(ShoppingListStoreSection section)
    {
        Dispatcher.Dispatch(new TemporaryItemSelectedSectionChangedAction(section));
    }

    private void OnAddButtonClicked()
    {
        Dispatcher.Dispatch(new SaveTemporaryItemAction());
    }

    private void OnSelectedQuantityTypeIdChanged(QuantityType quantityType)
    {
        Dispatcher.Dispatch(new TemporaryItemSelectedQuantityTypeChangedAction(quantityType.Id));
    }

    private RenderFragment GetFooter()
    {
        return @<Template>
                   <Button Class="ml-auto"
                           OnClick="OnAddButtonClicked"
                           @key="@("submit")"
                           Type="@ButtonType.Primary"
                           Disabled="@(!State.Value.TemporaryItemCreator.ItemName.Any())"
                           Loading="@State.Value.TemporaryItemCreator.IsSaving">
                       Add
                   </Button>
               </Template>;
    }
}
