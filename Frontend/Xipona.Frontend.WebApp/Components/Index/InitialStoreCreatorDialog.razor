@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.Actions.InitialStoreCreator
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.States

@inject IState<ShoppingListState> State
@inject IDispatcher Dispatcher

<Modal Visible="State.Value.InitialStoreCreator.IsOpen"
       Closable="false"
       MaskClosable="false"
       DestroyOnClose="true"
       Footer="GetFooter()">
    <div class="">
        <div class="welcome">Welcome to Xipona, your grocery and recipe assistant!</div>
        <div>
            In order to begin, let's create a store. After that, you can start adding items to it and
            begin your epic journey to the supermarket full of heroism, bravery and dragons! Well, hopefully not dragons...
        </div>
        <div class="max-w-150 mt-2">
            <Input TValue="string" Placeholder="Store name" OnInput="OnNameInputChanged" OnkeyDown="OnInputKeyDown">
            </Input>
        </div>
    </div>
</Modal>


@code
{
    private void OnNameInputChanged(ChangeEventArgs args)
    {
        Dispatcher.Dispatch(new InitialStoreNameChangedAction(args.Value?.ToString() ?? string.Empty));
    }

    private void OnInputKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            OnCreateButtonClicked();
        }
    }

    private void OnCreateButtonClicked()
    {
        Dispatcher.Dispatch(new CreateInitialStoreAction());
    }

    public RenderFragment GetFooter()
    {
        return @<Template>
                   <Button
                       OnClick="OnCreateButtonClicked"
                       Type="@ButtonType.Primary"
                       Disabled="@(State.Value.InitialStoreCreator.Name.Length == 0)"
                       Loading="@State.Value.InitialStoreCreator.IsSaving">
                       Create
                   </Button>
               </Template>;
    }
}
