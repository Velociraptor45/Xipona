@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.Actions.PriceUpdater
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.States

@inject IState<ShoppingListState> State
@inject IDispatcher Dispatcher

<Modal Title="@GetTitle()"
       Visible="State.Value.PriceUpdate.IsOpen"
       OnCancel="@OnCloseUpdatePriceModalButtonClicked"
       ConfirmLoading="State.Value.PriceUpdate.IsSaving"
       Footer="@GetFooter()">
    <AntDesign.InputNumber Formatter="FormatUpdatePrice"
                           Parser="ParseUpdatePrice"
                           Class="price-update-input"
                           TValue="decimal"
                           Value="State.Value.PriceUpdate.Price"
                           ValueChanged="OnPriceChanged"
                           Min="0.01m"></AntDesign.InputNumber>
    @if (State.Value.PriceUpdate.Item?.TypeId is not null)
    {
        <div class="pt-3">
            <Checkbox Checked="State.Value.PriceUpdate.UpdatePriceForAllTypes" ValueChanged="OnUpdatePriceForAllTypes">
                Update for all types
            </Checkbox>
        </div>
    }
    
    @if (State.Value.PriceUpdate.OtherItemTypePrices.Count != 0)
    {
        <div class="other-type-prices-header">Other type prices:</div>

        @foreach (var price in State.Value.PriceUpdate.OtherItemTypePrices)
        {
            <div class="other-type-price">
                @if(State.Value.PriceUpdate.Item!.PricePerQuantity != price.Price)
                {
                    <span class="price-warning"><Icon Type="warning" Theme="@IconThemeType.Fill" Fill="#f7d80f" /></span>
                }
                <span>@price.Name</span>: <span>@FormatUpdatePrice(price.Price)</span>
            </div>
        }
    }
</Modal>

@code {
    private void OnCloseUpdatePriceModalButtonClicked()
    {
        Dispatcher.Dispatch(new ClosePriceUpdaterAction());
    }

    private void OnPriceChanged(decimal price)
    {
        Dispatcher.Dispatch(new PriceOnPriceUpdaterChangedAction(price));
    }

    private void OnUpdatePriceForAllTypes(bool @checked)
    {
        Dispatcher.Dispatch(new UpdatePriceForAllTypesOnPriceUpdaterChangedAction(@checked));
    }

    private void OnUpdatePriceButtonClicked()
    {
        Dispatcher.Dispatch(new SavePriceUpdateAction());
    }

    private string FormatUpdatePrice(decimal value)
    {
        return $"{value:n2} {State.Value.PriceUpdate.Item?.QuantityType.PriceLabel}";
    }

    private string ParseUpdatePrice(string value)
    {
        if (State.Value.PriceUpdate.Item is null)
            return value;

        return value.Replace(State.Value.PriceUpdate.Item.QuantityType.PriceLabel, string.Empty);
    }

    private string GetTitle()
    {
        return $"Update price - {State.Value.PriceUpdate.Item?.Name ?? string.Empty}";
    }

    private RenderFragment GetFooter()
    {
        return 
            @<Template>
                <div class="d-flex">
                    <Button Class="ml-auto"
                            OnClick="OnUpdatePriceButtonClicked"
                            @key="@("submit")"
                            Type="@ButtonType.Primary"
                            Loading="State.Value.PriceUpdate.IsSaving">
                        Update
                    </Button>
                </div>
            </Template>;
    }
}
