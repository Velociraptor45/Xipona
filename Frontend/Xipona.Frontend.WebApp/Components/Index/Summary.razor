@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IItemPriceCalculationService PriceCalculationService;

@using Fluxor;
@using System.Text
@using System.Globalization;
@using ProjectHermes.Xipona.Frontend.Redux.Shared.States
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.Actions.Summary
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.States
@using ProjectHermes.Xipona.Frontend.WebApp.Services;

@inject IState<ShoppingListState> State
@inject IState<SharedState> SharedState
@inject IDispatcher Dispatcher

@if (State.Value.ShoppingList != null)
{
    <div class="d-flex flex-column mt-2 summary">
        <div class="pb-1 d-flex align-items-end flex-column">
            <div class="d-flex border-top pt-1 price-sum">
                <div class="d-flex">
                    <span>@GetInBasketPrice()</span>
                    <span class="currency">€</span>
                </div>
                <span class="px-1">/</span>
                <div class="d-flex">
                    <span>@GetTotalListPrice()</span>
                    <span class="currency">€</span>
                </div>
            </div>
        </div>
        <Button Type="@ButtonType.Primary"
                OnClick="@OnSummaryButtonClicked"
                Class="ml-auto"
                Disabled="@(!State.Value.ShoppingList.AnyItemInBasket || !SharedState.Value.IsOnline)">
            Summary
        </Button>
        <Modal TitleTemplate="@GetTitle()"
               Visible="@State.Value.Summary.IsOpen"
               OnCancel="@OnCloseSummaryButtonClicked"
               ConfirmLoading="@State.Value.Summary.IsSaving"
               Footer="@GetFooter()">
            <div>@GetItemInBasketCountText()</div>
            @if (State.Value.ShoppingList.ItemNotInBasketCount > 0)
            {
                <div class="pt-2">@GetItemNotInBasketCountText()</div>
            }
        </Modal>
    </div>
}

@code {
    private string Title => $"Finish shopping at {State.Value.SelectedStore?.Name}";

    private void OnSummaryButtonClicked()
    {
        if (!State.Value.ShoppingList!.AnyItemInBasket)
            return;

        Dispatcher.Dispatch(new OpenSummaryAction());
    }

    private void OnCloseSummaryButtonClicked()
    {
        Dispatcher.Dispatch(new CloseSummaryAction());
    }

    private void OnFinishListButtonClicked()
    {
        Dispatcher.Dispatch(new FinishShoppingListAction());
    }

    private void OnDateChanged(DateTime date)
    {
        Dispatcher.Dispatch(new FinishedAtOnSummaryChangedAction(date));
    }

    private void OnLeaveFinishedAtEditModeClicked()
    {
        Dispatcher.Dispatch(new LeaveFinishedAtEditModeAction());
    }

    private void OnEnterFinishedAtEditModeClicked()
    {
        Dispatcher.Dispatch(new EnterFinishedAtEditModeAction());
    }

    private string GetTotalListPrice()
    {
        var price = PriceCalculationService.GetTotalPrice(State.Value.ShoppingList!);
        return price.ToString("0.00");
    }

    private string GetInBasketPrice()
    {
        var price = PriceCalculationService.GetInBasketPrice(State.Value.ShoppingList!);
        return price.ToString("0.00");
    }

    private RenderFragment GetFooter()
    {
        return 
             @<Template>
                   <div class="d-flex">
                       <div class="summary-price font-weight-bold align-self-center">@GetInBasketPrice()€</div>
                       <Button Class="ml-auto"
                               OnClick="OnFinishListButtonClicked"
                               Disabled="@State.Value.Summary.IsEditingFinishedAt"
                               @key="@("submit")"
                               Type="@ButtonType.Primary"
                               Loading="@State.Value.Summary.IsSaving">
                           Finish
                       </Button>
                   </div>
               </Template>;
    }

    private RenderFragment GetTitle()
    {
        return @<Template>
                   <div class ="summary-header">
                       <div>@Title</div>
                       <div>
                           @if (State.Value.Summary.IsEditingFinishedAt)
                           {
                               <div class="d-flex summary-datetime-edit">
                                   <div class="summary-date-picker">
                                       <DatePicker Size="@AntSizeLDSType.Small"
                                                   AllowClear="false"
                                                   TValue="DateTime"
                                                   Format="dd.MM.yyyy" Value="State.Value.Summary.FinishedAt"
                                                   ValueChanged="OnDateChanged"></DatePicker>
                                   </div>
                                   <div class="summary-time-picker">
                                       <TimePicker Size="@AntSizeLDSType.Small"
                                                   AllowClear="false"
                                                   TValue="DateTime"
                                                   Format="HH:mm:ss"
                                                   Value="State.Value.Summary.FinishedAt"
                                                   ValueChanged="OnDateChanged"></TimePicker>
                                   </div>
                                   <div>
                                       <Button Class="d-flex align-items-center"
                                               Size="@AntSizeLDSType.Small"
                                               OnClick="OnLeaveFinishedAtEditModeClicked">
                                            <i class="bi bi-check shopping-list-summary-finish-time-editing"></i>
                                       </Button>
                                   </div>
                               </div>
                           }
                           else
                           {
                                <div class="d-flex">
                        <div class="summary-datetime" @onclick="OnEnterFinishedAtEditModeClicked">@GetDateTime()</div>
                                    <i class="bi bi-pencil summary-datetime-edit d-flex align-items-start pl-1"
                                       @onclick="OnEnterFinishedAtEditModeClicked"></i>
                                </div>
                           }
                       </div>
                   </div>
            </Template>;
    }

    private string GetItemInBasketCountText()
    {
        var builder = new StringBuilder();
        var count = State.Value.ShoppingList!.ItemInBasketCount;
        builder.Append(count.ToString());

        builder.Append(count == 1 ? " item " : " items ");

        builder.Append("in basket");
        return builder.ToString();
    }

    private string GetItemNotInBasketCountText()
    {
        var builder = new StringBuilder();
        var count = State.Value.ShoppingList!.ItemNotInBasketCount;
        builder.Append(count.ToString());

        builder.Append(count == 1 ? " item " : " items ");

        builder.Append("will be moved to the next shopping list");
        return builder.ToString();
    }

    private string GetDateTime()
    {
        return State.Value.Summary.FinishedAt.ToString("g", CultureInfo.GetCultureInfo("de-de"));
    }
}
