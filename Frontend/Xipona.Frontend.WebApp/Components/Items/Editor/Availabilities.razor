@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.Items.Actions.Editor.Availabilities
@using ProjectHermes.Xipona.Frontend.Redux.Items.States

@inject IState<ItemState> State
@inject IDispatcher Dispatcher

<div>
    <div class="mt-3 d-flex justify-content-start align-items-center">
        <div class="font-weight-bold mr-2">Stores</div>
        <Button class="d-flex align-items-center" Size="@AntSizeLDSType.Small" OnClick="OnAddStoreButtonClicked"
                Disabled="@(!Available.GetNotRegisteredStores(State.Value.Stores.Stores).Any())">
            <i class="bi bi-plus-lg"></i>
        </Button>
    </div>
    @if (TryGetDuplicatedStoreMessage(out var duplicationMessage))
    {
        <div class="validation-error-message">@duplicationMessage</div>
    }
    @if (TryGetNoStoresMessage(out var noStoresMessage))
    {
        <div class="validation-error-message">@noStoresMessage</div>
    }
    @if (Available.Availabilities.Any())
    {
        <div class="pt-2 stores">
            @foreach (var availability in Available.Availabilities)
            {
                <div class="store">
                    <Availability Available="Available" Model="@availability"></Availability>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public IAvailable Available { get; set; }
    
    private void OnAddStoreButtonClicked()
    {
        Dispatcher.Dispatch(new AddStoreAction(Available));
    }

    private bool TryGetDuplicatedStoreMessage(out string? message)
    {
        if (Available is EditedItem)
        {
            message = State.Value.Editor.ValidationResult.DuplicatedStores;
            return State.Value.Editor.ValidationResult.DuplicatedStores is not null;
        }

        var type = (EditedItemType)Available;
        return State.Value.Editor.ValidationResult.DuplicatedTypeStores.TryGetValue(type.Key, out message);
    }

    private bool TryGetNoStoresMessage(out string? message)
    {
        if (Available is EditedItem)
        {
            message = State.Value.Editor.ValidationResult.NoStores;
            return State.Value.Editor.ValidationResult.NoStores is not null;
        }

        var type = (EditedItemType)Available;
        return State.Value.Editor.ValidationResult.NoTypeStores.TryGetValue(type.Key, out message);
    }
}