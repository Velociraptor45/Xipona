@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.Items.Actions.Editor.Availabilities
@using ProjectHermes.Xipona.Frontend.Redux.Items.States

@inject IState<ItemState> State
@inject IDispatcher Dispatcher

<div class="availability d-flex">
    <div class="data pr-2">
        <Select Class="mr-2 store"
                DataSource="Available.CreateAvailabilityStores(Model, State.Value.Stores.Stores).ToList()"
                TItem="EditedItemAvailabilityStore"
                TItemValue="Guid"
                Value="Model.StoreId"
                ValueName="@nameof(EditedItemAvailabilityStore.Id)"
                LabelName="@nameof(EditedItemAvailabilityStore.Name)"
                DisabledName="@nameof(EditedItemAvailabilityStore.IsDisabled)"
                IgnoreItemChanges="false"
                OnSelectedItemChanged="@OnStoreChanged">
        </Select>
        <div class="d-flex pt-1">
            <div class="price-input">
                <AntDesign.InputNumber TValue="float" Value="@Model.PricePerQuantity" 
                                       Formatter="FormatPriceInput"
                                       Parser="ParsePriceInput"
                                       Min="0.01f"
                                       ValueChanged="OnPriceChanged"/>
            </div>
            <Select DataSource="State.Value.Stores.GetSections(Model.StoreId)"
                    TItem="ItemStoreSection"
                    TItemValue="Guid"
                    ValueName="@nameof(ItemStoreSection.Id)"
                    LabelName="@nameof(ItemStoreSection.Name)"
                    OnSelectedItemChanged="OnDefaultSectionChanged"
                    IgnoreItemChanges="false"
                    Value="@Model.DefaultSectionId"></Select>
        </div>
    </div>
    <Button Class="d-flex align-items-center ml-auto"
            OnClick="@OnRemoveStoreButtonClicked"
            Danger="true">
        <i class="bi bi-dash-lg"></i>
    </Button>
</div>

@code {
    [Parameter] public IAvailable Available { get; set; }
    [Parameter] public EditedItemAvailability Model { get; set; }

    private void OnStoreChanged(EditedItemAvailabilityStore store)
    {
        Dispatcher.Dispatch(new ChangeStoreAction(Available, Model, store.Id));
    }

    private void OnRemoveStoreButtonClicked()
    {
        Dispatcher.Dispatch(new RemoveStoreAction(Available, Model));
    }

    private void OnDefaultSectionChanged(ItemStoreSection section)
    {
        Dispatcher.Dispatch(new ChangeDefaultSectionAction(Available, Model, section.Id));
    }

    private void OnPriceChanged(float price)
    {
        Dispatcher.Dispatch(new ChangePriceAction(Available, Model, price));
    }

    private string FormatPriceInput(float price)
    {
        return $"{price:0.00} {State.Value.Editor.Item!.QuantityType.PriceLabel}";
    }

    private string ParsePriceInput(string value)
    {
        return value.Replace(State.Value.Editor.Item!.QuantityType.PriceLabel, string.Empty);
    }
}