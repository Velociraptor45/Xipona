@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.Stores.Actions.Editor
@using ProjectHermes.Xipona.Frontend.Redux.Stores.States

@inject IDispatcher Dispatcher
@inject IState<StoreState> State

<Modal Title="@($"Delete store {State.Value.Editor.Store!.Name}")"
       Visible="@State.Value.Editor.IsShowingDeletionNotice"
       OnCancel="@OnDeleteModalCancelClicked"
       OnOk="@OnDeleteModalOkClicked"
       OkText="@($"Delete {State.Value.Editor.Store.Name}")"
       OkButtonProps="@CreateOkButtonProps()"
       ConfirmLoading="@State.Value.Editor.IsDeleting"
       CancelText="@("Cancel")">
    <div>
        Deleting a store will also remove any availability of items in this store.
        Items that are only available in this store will be deleted.
    </div>
</Modal>

@code {
    private void OnDeleteModalCancelClicked()
    {
        Dispatcher.Dispatch(new DeleteStoreAbortedAction());
    }

    private void OnDeleteModalOkClicked()
    {
        Dispatcher.Dispatch(new DeleteStoreConfirmedAction());
    }

    private ButtonProps CreateOkButtonProps()
    {
        var props = new ButtonProps
        {
            Danger = true
        };
        return props;
    }
}
