@page "/"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.Actions
@using ProjectHermes.Xipona.Frontend.Redux.ShoppingList.States
@using ProjectHermes.Xipona.Frontend.WebApp.Components.Index;

@inject IState<ShoppingListState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.Xipona.Frontend.WebApp.Pages.Index

@if (State != null)
{
    <div class="shopping-content">
        <div class="top-header">
            <div class="mb-1 d-flex justify-content-end align-items-center">
                <StoreSelect></StoreSelect>
                <ItemVisiblityButton></ItemVisiblityButton>
                <ItemEditModeButton></ItemEditModeButton>
            </div>
            <ItemSearchBar></ItemSearchBar>
        </div>
        @if (State.Value.ShoppingList is not null)
        {
            <div class="sections">
                @foreach(var section in State.Value.GetSectionsToDisplay())
                {
                    <Section Model="section"></Section>
                }
            </div>
            @if (!State.Value.ShoppingList.Items.Any())
            {
                <div class="no-items-on-list-notice py-2">
                    No items on list yet
                </div>
            }
            else if (State.Value.AllItemsInBasketHidden)
            {
                <div class="all-items-in-basket-hidden-notice py-2">
                    All items in basket
                </div>
            }
        }
        <Summary></Summary>
    </div>
    <PriceUpdateDialog></PriceUpdateDialog>
}

@code{
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new ShoppingListEnteredAction());
        Dispatcher.Dispatch(new LoadQuantityTypesAction());
        Dispatcher.Dispatch(new LoadQuantityTypesInPacketAction());
        Dispatcher.Dispatch(new LoadAllActiveStoresAction());

        base.OnInitialized();
    }
}