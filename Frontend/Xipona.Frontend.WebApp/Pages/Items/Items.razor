@page "/items"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.Xipona.Frontend.Redux.Items.Actions
@using ProjectHermes.Xipona.Frontend.Redux.Items.Actions.Editor
@using ProjectHermes.Xipona.Frontend.Redux.Items.Actions.Search
@using ProjectHermes.Xipona.Frontend.Redux.Items.States
@using ProjectHermes.Xipona.Frontend.Redux.Shared.States
@using ProjectHermes.Xipona.Frontend.WebApp.Components.Items.Filter;

@inject IState<SharedState> SharedState
@inject IState<ItemState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.Xipona.Frontend.WebApp.Pages.Items

<div class="pt-2 items">
    <div class="top-bar d-flex">
        <ItemFilter></ItemFilter>
        <div class="d-flex ml-auto">
            <Tooltip Placement="Placement.BottomRight" Title="@("Create new item")" Disabled="SharedState.Value.IsMobile">
                <Button Type="@ButtonType.Primary" @onclick="OnCreateItemButtonClicked" 
                        Class="d-flex align-items-center ml-auto">
                    <i class="bi bi-plus-lg"></i>
                </Button>
            </Tooltip>
        </div>
    </div>
    <div class="mt-2">
        @if (State.Value.Search.SearchResults.Count == 0)
        {
            @if (State.Value.Search.TriggeredAtLeastOnce)
            {
                <div class="no-items-found-notice">
                    No items found
                </div>
            }
            else
            {
                <div class="initial-search-notice">
                    Search through all persisted items
                </div>
            }
        }
        <!-- result item list -->
        @foreach (var item in State.Value.Search.SearchResults)
        {
            <SearchResult Model="item" TAction="EditItemAction" IsLastItem="State.Value.Search.SearchResults.Last() == item">
                <div class="d-flex row">
                    <div class="col-5">@item.Name</div>
                    <div class="col-7">@item.ManufacturerName</div>
                </div>
            </SearchResult>
        }
        @if(State.Value.Search.SearchResults.Count > 0)
        {
            <div class="d-flex justify-content-center pt-4 pb-4">
                <Pagination Current="@State.Value.Search.Page"
                            ShowSizeChanger="true"
                            HideOnSinglePage="true"
                            PageSize="@State.Value.Search.PageSize"
                            PageSizeOptions="[10, 25, 50, 100]"
                            Total="@State.Value.Search.TotalResultCount"
                            OnChange="OnPageChanged"
                            OnShowSizeChange="OnPageSizeChanged">
                </Pagination>
            </div>
        }
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new EnterItemSearchPageAction());
        base.OnInitialized();
    }

    private void OnCreateItemButtonClicked()
    {
        Dispatcher.Dispatch(new EditItemAction
        {
            Id = Guid.Empty
        });
    }

    private void OnPageChanged(PaginationEventArgs args)
    {
        Console.WriteLine(args.Page);
        Dispatcher.Dispatch(new SearchPageChangedAction(args.Page));
    }

    private void OnPageSizeChanged(PaginationEventArgs args)
    {
        Dispatcher.Dispatch(new SearchPageSizeChangedAction(args.PageSize));
    }
}