@page "/items/{ItemId:guid}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.Items.Actions
@using ProjectHermes.ShoppingList.Frontend.Redux.Items.Actions.Editor
@using ProjectHermes.ShoppingList.Frontend.Redux.Items.States
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Items.Editor;

@inject IState<ItemState> State
@inject IDispatcher Dispatcher

@if (State.Value.Editor.Item != null)
{
    <div class="pt-2 item-editor">
        <div class="d-flex">
            <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClicked">
                <i class="bi bi-arrow-left"></i>
            </Button>
            <div class="mx-3">
                <Input TValue="string" Value="@State.Value.Editor.Item.Name"
                       OnChange="OnNameChanged" Placeholder="Item name" />
                @if (State.Value.Editor.ValidationResult.Name is not null)
                {
                    <div class="validation-error-message">@State.Value.Editor.ValidationResult.Name</div>
                }
            </div>
            <DeleteItem></DeleteItem>
        </div>
        <hr class="my-3" />
        <div class="d-flex pb-2">
            <ItemCategorySelect></ItemCategorySelect>
            <ManufacturerSelect></ManufacturerSelect>
        </div>
        <Quantity></Quantity>
        @if (State.Value.Editor.Item.ItemMode == ItemMode.WithoutTypes
             || (!State.Value.Editor.Item.ItemTypes.Any() && State.Value.Editor.Item.ItemMode == ItemMode.NotDefined))
        {
            <Availabilities Available="@State.Value.Editor.Item"></Availabilities>
        }
        @if (State.Value.Editor.Item.ItemMode == ItemMode.WithTypes
             || (!State.Value.Editor.Item.Availabilities.Any() && State.Value.Editor.Item.ItemMode == ItemMode.NotDefined))
        {
            <ItemTypes></ItemTypes>
        }
        @if(State.Value.Editor.ValidationResult.StoreOrTypes is not null)
        {
            <div class="validation-error-message store-or-types">@State.Value.Editor.ValidationResult.StoreOrTypes</div>
        }
        <div class="pb-2 pt-4">
            <TextArea Placeholder="Comment" MinRows="2" 
                Value="@State.Value.Editor.Item.Comment" OnChange="OnCommentChanged"></TextArea>
        </div>
        <div class="d-flex justify-content-end">
            @if (State.Value.Editor.Item.Id == Guid.Empty)
            {
                <Button OnClick="@OnCreateButtonClicked"
                        Disabled="@(State.Value.Editor.Item.Name.Length == 0)"
                        Loading="@State.Value.Editor.IsModifying">
                    Create
                </Button>
            }
            else if (State.Value.Editor.Item.IsTemporary)
            {
                <Button OnClick="@OnMakeItemPermanentButtonClicked"
                        Disabled="@(State.Value.Editor.Item.Name.Length == 0)"
                        Loading="@State.Value.Editor.IsModifying">
                    Make Permanent
                </Button>
            }
            else
            {
                <Button Disabled="@(State.Value.Editor.Item.Name.Length == 0)"
                        Loading="@State.Value.Editor.IsModifying"
                        OnClick="@OnModifyButtonClicked">Modify</Button>
                <Button Type="@ButtonType.Primary"
                        Class="ml-2"
                        Disabled="@(State.Value.Editor.Item.Name.Length == 0)"
                        Loading="@State.Value.Editor.IsUpdating"
                        OnClick="@OnUpdateButtonClicked">Update</Button>
            }
        </div>
    </div>
}

@code {
    [Parameter] public Guid ItemId { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Dispatcher.Dispatch(new LoadQuantityTypesAction());
        Dispatcher.Dispatch(new LoadQuantityTypesInPacketAction());
        Dispatcher.Dispatch(new LoadActiveStoresAction());

        if(ItemId == Guid.Empty)
            Dispatcher.Dispatch(new SetNewItemAction());
        else
            Dispatcher.Dispatch(new LoadItemForEditingAction(ItemId));
    }

    private void OnCreateButtonClicked()
    {
        Dispatcher.Dispatch(new CreateItemAction());
    }

    private void OnModifyButtonClicked()
    {
        Dispatcher.Dispatch(new ModifyItemAction());
    }

    private void OnUpdateButtonClicked()
    {
        Dispatcher.Dispatch(new UpdateItemAction());
    }

    private void OnMakeItemPermanentButtonClicked()
    {
        Dispatcher.Dispatch(new MakeItemPermanentAction());
    }

    private void OnBackButtonClicked()
    {
        Dispatcher.Dispatch(new LeaveItemEditorAction(false));
    }

    private void OnNameChanged(string name)
    {
        Dispatcher.Dispatch(new ItemNameChangedAction(name));
    }

    private void OnCommentChanged(string comment)
    {
        Dispatcher.Dispatch(new ItemCommentChangedAction(comment));
    }
}