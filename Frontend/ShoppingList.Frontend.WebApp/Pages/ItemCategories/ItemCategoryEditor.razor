@page "/item-categories/{ItemCategoryId:guid}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.ItemCategories.Actions
@using ProjectHermes.ShoppingList.Frontend.Redux.ItemCategories.States
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.ItemCategories

@inject IState<ItemCategoryState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.ItemCategories

@if (State.Value.Editor.ItemCategory is not null)
{
    <div class="mt-2 item-category">
        <div class="d-flex">
            <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClicked">
                <i class="bi bi-arrow-left"></i>
            </Button>
            <div class="mx-3">
                <Input Placeholder="Item category name"
                       TValue="string"
                       Value="@State.Value.Editor.ItemCategory.Name"
                       OnChange="OnNameChanged"/>
            </div>
            @if (State.Value.Editor.ItemCategory.Id != Guid.Empty)
            {
                <DeleteItemCategory></DeleteItemCategory>
            }
        </div>
        <div class="d-flex justify-content-end mt-4">
            <Button Type="@ButtonType.Primary" @onclick="@OnSaveButtonClicked"
                    Disabled="@(State.Value.Editor.ItemCategory.Name.Length == 0)"
                    Loading="@State.Value.Editor.IsSaving">
                @if (State.Value.Editor.ItemCategory.Id == Guid.Empty)
                {
                    @("Create")
                }
                else
                {
                    @("Save")
                }
            </Button>
        </div>
    </div>
}

@code {
    [Parameter] public Guid ItemCategoryId { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if(ItemCategoryId == Guid.Empty)
            Dispatcher.Dispatch(new SetNewItemCategoryAction());
        else
            Dispatcher.Dispatch(new LoadItemCategoryForEditingAction(ItemCategoryId));
    }
    
    private void OnBackButtonClicked()
    {
        Dispatcher.Dispatch(new LeaveItemCategoryEditorAction(false));
    }

    private void OnNameChanged(string name)
    {
        Dispatcher.Dispatch(new EditedItemCategoryNameChangedAction(name));
    }

    private void OnSaveButtonClicked()
    {
        Dispatcher.Dispatch(new SaveItemCategoryAction());
    }
}