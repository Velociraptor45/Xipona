@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using ProjectHermes.ShoppingList.Frontend.Redux.Shared.States
@typeparam T where T : class, ProjectHermes.ShoppingList.Frontend.Redux.Shared.States.ISortableItem

<div class="my-1 d-flex">
    <div class="@(IsTextArea ? "" : "d-flex") mr-2">
        <Button Class="align-items-center justify-content-center d-flex"
                OnClick="() => OnDecrement?.Invoke(Model)"
                Disabled="@(Model.SortingIndex == State.MinSortingIndex)">
            <i class="bi bi-chevron-up"></i>
        </Button>
        <Button Class=@("align-items-center justify-content-center d-flex" + (IsTextArea ? " mt-1" : " ml-1"))
                OnClick="() => OnIncrement?.Invoke(Model)"
                Disabled="@(Model.SortingIndex == State.MaxSortingIndex)">
            <i class="bi bi-chevron-down"></i>
        </Button>
    </div>
    <div class="@_textContentClasses text-content">
        @if (IsTextArea)
        {
            <TextArea Placeholder="@Placeholder" MinRows="4" Value="@Model.Name" ValueChanged="OnChanged"></TextArea>
        }
        else
        {
            <Input Placeholder="@Placeholder" TValue="string" Value="@Model.Name" ValueChanged="OnChanged" />
        }
        @if (ErrorMessage is not null)
        {
            <div class="validation-error-message">@ErrorMessage</div>
        }
    </div>
    <div class="ml-2">
        <Button Class="align-items-center justify-content-center d-flex"
                Danger="true"
                OnClick="() => OnRemove?.Invoke(Model)"
                Disabled="@(DisableRemove())">
            <i class="bi bi-dash-lg"></i>
        </Button>
    </div>
</div>

@code {
    [Parameter]
    public ISortable<T> State { get; set; }
    [Parameter]
    public T Model { get; set; }
    [Parameter]
    public bool IsTextArea { get; set; } = false;
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public Action<T, string> OnTextChanged { get; set; }
    [Parameter]
    public Action<T> OnRemove { get; set; }
    [Parameter]
    public Action<T> OnIncrement { get; set; }
    [Parameter]
    public Action<T> OnDecrement { get; set; }
    [Parameter]
    public Func<bool> DisableRemove { get; set; } = () => false;
    [Parameter]
    public string? ErrorMessage { get; set; }

    private string _textContentClasses = string.Empty;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (!IsTextArea)
            _textContentClasses = "area";
    }

    private void OnChanged(string text)
    {
        OnTextChanged?.Invoke(Model, text);
    }
}