@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.Shared.States
@using ProjectHermes.ShoppingList.Frontend.Redux.ShoppingList.Actions.Items
@using ProjectHermes.ShoppingList.Frontend.Redux.ShoppingList.Actions.PriceUpdater
@using ProjectHermes.ShoppingList.Frontend.Redux.ShoppingList.States
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services;

@inject IItemPriceCalculationService ItemPriceCalculationService;

@inject IState<ShoppingListState> State
@inject IState<SharedState> SharedState
@inject IDispatcher Dispatcher

<li class="py-2 mb-1 @(State.Value.EditModeActive ? "item-editing" : "item") @(Model.IsInBasket ? "in-basket" : "not-in-basket")" 
        @onclick="OnItemClicked">
    @if (State.Value.EditModeActive)
    {
        <div class="d-flex flex-column ml-2">
            <div class="d-flex">
                <!-- upper row -->
                <div class="d-flex">
                    <div class="h3 pl-1">@Model.Name</div>
                    <div class="pb-2 pl-1 align-self-end">@($"{CalculatePrice():0.00}")€</div>
                </div>
                <Button Danger="true"
                        Class="mr-2 ml-auto px-2 remove-item"
                        OnClick="@OnRemoveItemButtonClicked">
                    <i class="bi bi-x-lg"></i>
                </Button>
            </div>
            <div>
                <!-- lower row -->
                <div class="d-flex">
                    <div class="d-flex">
                        <div class="mr-3">
                            <AntDesign.InputNumber TValue="float" Value="@Model.Quantity" Min="1f"
                                                   Class="quantity-input"
                                                   Formatter="FormatQuantityInput"
                                                   Parser="ParseQuantityInput"
                                                   ValueChanged="OnQuantityInputValueChanged">
                            </AntDesign.InputNumber>
                        </div>
                        <div class="d-flex">
                            <Button Class="px-2" OnClick="OnIncrementQuantityButtonClicked">
                                <i class="bi bi-plus-lg"></i>
                            </Button>
                            <Button Class="px-2" OnClick="OnDecrementQuantityButtonClicked">
                                <i class="bi bi-dash-lg"></i>
                            </Button>
                        </div>
                    </div>
                    @if (Model.IsTemporary)
                    {
                        <!-- make item permanent -->
                        <div class="px-2 m-0 ml-auto">
                            <Button Class="px-2" OnClick="@OnMakeItemPermanentButtonClicked"
                                    Disabled="@(Model.Id.ActualId == null || !SharedState.Value.IsOnline)">
                                <i class="bi bi-download"></i>
                            </Button>
                        </div>
                    }
                    else
                    {
                        <!-- update item price -->
                        <div class="px-2 m-0 ml-auto">
                            <Button Class="px-2" OnClick="OnOpenUpdatePriceClicked"
                                    Disabled="@(!SharedState.Value.IsOnline)">
                                <i class="bi bi-currency-dollar"></i>
                            </Button>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex">
            <div class="m-0 quantity">
                <div class="pl-1">
                    <span>@Model.Quantity</span><span>@Model.QuantityType.QuantityLabel</span>
                </div>
            </div>
            <div class="m-0 pl-1">
                @Model.Name
            </div>
            <div class="px-2 m-0 align-self-center ml-auto price">
                <span>@($"{CalculatePrice():0.00}")</span><span class="price-currency">€</span>
            </div>
        </div>
    }
</li>

@code{
    [Parameter] public ShoppingListItem Model { get; set; }

    private void OnItemClicked()
    {
        if (State.Value.EditModeActive)
            return;

        if (Model.IsInBasket)
        {
            Dispatcher.Dispatch(new RemoveItemFromBasketAction(Model.Id, Model.TypeId, Model.Name));
        }
        else
        {
            Dispatcher.Dispatch(new PutItemInBasketAction(Model.Id, Model.TypeId, Model.Name));
        }
    }

    private float CalculatePrice()
    {
        return ItemPriceCalculationService.CalculatePrice(Model.QuantityType.Id, Model.PricePerQuantity, Model.Quantity);
    }

    private void OnQuantityInputValueChanged(float quantity)
    {
        Dispatcher.Dispatch(new ChangeItemQuantityAction(Model.Id, Model.TypeId, quantity,
            ChangeItemQuantityAction.ChangeType.Absolute, Model.Name));
    }

    private void OnRemoveItemButtonClicked()
    {
        Dispatcher.Dispatch(new RemoveItemFromShoppingListAction(Model.Id, Model.TypeId, Model.Name));
    }

    private void OnIncrementQuantityButtonClicked()
    {
        Dispatcher.Dispatch(new ChangeItemQuantityAction(Model.Id, Model.TypeId, Model.QuantityType.DefaultQuantity,
            ChangeItemQuantityAction.ChangeType.Diff, Model.Name));
    }

    private void OnDecrementQuantityButtonClicked()
    {
        Dispatcher.Dispatch(new ChangeItemQuantityAction(Model.Id, Model.TypeId, -Model.QuantityType.DefaultQuantity,
            ChangeItemQuantityAction.ChangeType.Diff, Model.Name));
    }

    private void OnMakeItemPermanentButtonClicked()
    {
        Dispatcher.Dispatch(new MakeItemPermanentAction(Model.Id.ActualId!.Value));
    }

    private void OnOpenUpdatePriceClicked()
    {
        Dispatcher.Dispatch(new OpenPriceUpdaterAction(Model));
    }

    private string FormatQuantityInput(float quantity)
    {
        return $"{quantity:0.##} {Model.QuantityType.QuantityLabel}";
    }

    private string ParseQuantityInput(string value)
    {
        return value.Replace(Model.QuantityType.QuantityLabel, string.Empty);
    }
}