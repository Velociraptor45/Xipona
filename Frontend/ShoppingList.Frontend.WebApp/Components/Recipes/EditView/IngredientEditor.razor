@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.ItemCategories.States
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.Ingredients
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.Ingredients.ItemCategorySelectors
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.States
@using ProjectHermes.ShoppingList.Frontend.Redux.Shared.States

@inject IState<SharedState> SharedState
@inject IState<RecipeState> State
@inject IDispatcher Dispatcher

<div class="ingredient">
    <div class="d-flex align-items-start">
        <div class="item-select">
            <SingleSearchSelect Class="min-w-150"
                                TItem="ItemCategorySearchResult"
                                TValue="Guid"
                                DataSource="@Model.ItemCategorySelector.ItemCategories"
                                ValueName="@nameof(ItemCategorySearchResult.Id)"
                                LabelName="@nameof(ItemCategorySearchResult.Name)"
                                OnItemChanged="@OnItemCategoryChanged"
                                OnItemAdded="@OnNewItemCategoryCreated"
                                OnInputChanged="OnItemCategoryInputChanged"
                                Placeholder="Item Category"
                                Value="@Model.ItemCategoryId"
                                SearchInput="@Model.ItemCategorySelector.Input"
                                OnDropdownClosed="OnItemCategoryDropdownClosed"
                                CanAddItem="true">
            </SingleSearchSelect>
            @if(TryGetItemCategoryErrorMessage(out var errorMessage))
            {
                <div class="validation-error-message">@errorMessage</div>
            }
            @if (Model.ItemCategoryId != Guid.Empty && Model.ItemSelector.Items.Any())
            {
                <Select Class="mt-2 min-w-150"
                        Placeholder="Default item"
                        ValueName="@nameof(SearchItemByItemCategoryResult.SelectIdentifier)"
                        LabelName="@nameof(SearchItemByItemCategoryResult.Name)"
                        DataSource="@Model.ItemSelector.Items"
                        TItemValue="string"
                        TItem="SearchItemByItemCategoryResult"
                        OnSelectedItemChanged="OnItemChanged"
                        AllowClear="true"
                        Value="@($"{Model.DefaultItemId?.ToString() ?? string.Empty}{Model.DefaultItemTypeId?.ToString() ?? string.Empty}")">
                </Select>
            }
            @if (Model.DefaultItemId is not null)
            {
                <SingleSelect Class="pl-4 mt-1 min-w-150"
                              DataSource="@Model.AvailableStoresOfItem.ToList()"
                              TItem="SearchItemByItemCategoryAvailability"
                              TValue="Guid"
                              Value="@Model.DefaultStoreId!.Value"
                              ValueName="@nameof(SearchItemByItemCategoryAvailability.StoreId)"
                              LabelName="@nameof(SearchItemByItemCategoryAvailability.StoreName)"
                              IgnoreItemChanges="false"
                              OnItemChanged="OnDefaultStoreChanged">
                </SingleSelect>
            }
        </div>
        <div>
            <Button Class="d-flex align-items-center ml-auto"
                    OnClick="@OnRemoveIngredientButtonClicked"
                    Danger="true">
                <i class="bi bi-dash-lg"></i>
            </Button>
            <div class="d-flex mt-2">
                <!-- Quantity -->
                <AntDesign.InputNumber Class="ml-4 mr-1 w-75"
                                       TValue="float"
                                       Value="@Model.Quantity"
                                       ValueChanged="OnQuantityChanged"
                                       Min="1f"
                                       Step="1"></AntDesign.InputNumber>
                <!-- Quantity Type -->
                <div class="ingredient-quantity-type-select">
                    <SingleSelect TItem="IngredientQuantityType"
                                  TValue="int"
                                  ValueName="@nameof(IngredientQuantityType.Id)"
                                  LabelName="@nameof(IngredientQuantityType.QuantityLabel)"
                                  Placeholder="QuantityInPacketType"
                                  Value="@Model.QuantityTypeId"
                                  DataSource="@State.Value.IngredientQuantityTypes.ToList()"
                                  OnItemChanged="@OnIngredientQuantityTypeChanged">
                    </SingleSelect>
                </div>
            </div>
            @if (Model.DefaultItemId is not null)
            {
                <div class="add-to-sl-wrapper align-items-center ml-4 mt-1">
                    <Tooltip Placement="Placement.BottomRight"
                             Title="@("Select this item by default when adding recipe ingredients to shopping lists")"
                             Disabled="SharedState.Value.IsMobile">
                        <Checkbox Value="@Model.AddToShoppingListByDefault!.Value"
                                  OnChange="OnAddToShoppingListByDefaultChanged">Add by default</Checkbox>
                    </Tooltip>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EditedIngredient Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Dispatcher.Dispatch(new LoadInitialItemsAction(Model));
        Dispatcher.Dispatch(new LoadInitialItemCategoryAction(Model));
    }

    private bool TryGetItemCategoryErrorMessage(out string? errorMessage)
    {
        return State.Value.Editor.ValidationResult.IngredientItemCategory.TryGetValue(Model.Key, out errorMessage);
    }

    private void OnItemChanged(SearchItemByItemCategoryResult itemSearchResult)
    {
        if (itemSearchResult is null)
        {
            Dispatcher.Dispatch(new SelectedItemClearedAction(Model.Key));
            return;
        }

        Dispatcher.Dispatch(new SelectedItemChangedAction(Model.Key, itemSearchResult.ItemId,
            itemSearchResult.ItemTypeId));
    }

    private void OnIngredientQuantityTypeChanged(IngredientQuantityType quantityType)
    {
        Dispatcher.Dispatch(new IngredientQuantityTypeChangedAction(Model.Key, quantityType.Id));
    }

    private void OnQuantityChanged(float quantity)
    {
        Dispatcher.Dispatch(new IngredientQuantityChangedAction(Model.Key, quantity));
    }

    private void OnRemoveIngredientButtonClicked()
    {
        Dispatcher.Dispatch(new IngredientRemovedAction(Model));
    }

    private void OnItemCategoryChanged(ItemCategorySearchResult itemCategory)
    {
        Dispatcher.Dispatch(new SelectedItemCategoryChangedAction(Model.Key, itemCategory.Id));
    }

    private void OnNewItemCategoryCreated()
    {
        Dispatcher.Dispatch(new CreateNewItemCategoryAction(Model.Key));
    }

    private void OnItemCategoryInputChanged(string input)
    {
        Dispatcher.Dispatch(new ItemCategoryInputChangedAction(Model, input));
    }

    private void OnItemCategoryDropdownClosed()
    {
        Dispatcher.Dispatch(new ItemCategoryDropdownClosedAction(Model));
    }

    private void OnDefaultStoreChanged(SearchItemByItemCategoryAvailability store)
    {
        Dispatcher.Dispatch(new IngredientDefaultStoreChangedAction(Model.Key, store.StoreId));
    }

    private void OnAddToShoppingListByDefaultChanged(bool value)
    {
        Dispatcher.Dispatch(new IngredientAddToShoppingListByDefaultChangedAction(Model.Key, value));
    }
}
